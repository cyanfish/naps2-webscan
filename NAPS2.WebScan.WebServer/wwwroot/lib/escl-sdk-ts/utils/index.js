"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatScannerLEDMInfo = exports.getArrayCommonItem = exports.getMaxValOfArrByKey = exports.arraySortByKey = exports.ab2string = void 0;
function ab2string(buffer) {
    var byteArray = new Uint8Array(buffer);
    var str = "", cc = 0, numBytes = 0;
    for (var i = 0, len = byteArray.length; i < len; ++i) {
        var v = byteArray[i];
        if (numBytes > 0) {
            if ((cc & 192) === 192) {
                cc = (cc << 6) | (v & 63);
            }
            else {
                throw new Error("this is no tailing-byte");
            }
        }
        else if (v < 128) {
            numBytes = 1;
            cc = v;
        }
        else if (v < 192) {
            throw new Error("invalid byte, this is a tailing-byte");
        }
        else if (v < 224) {
            numBytes = 2;
            cc = v & 31;
        }
        else if (v < 240) {
            numBytes = 3;
            cc = v & 15;
        }
        else {
            throw new Error("invalid encoding, value out of range");
        }
        if (--numBytes === 0) {
            str += String.fromCharCode(cc);
        }
    }
    if (numBytes) {
        throw new Error("the bytes don't sum up");
    }
    return str;
}
exports.ab2string = ab2string;
function arraySortByKey(array, key) {
    array.sort(function (a, b) {
        return Number(a[key]) - Number(b[key]);
    });
    return array;
}
exports.arraySortByKey = arraySortByKey;
function getMaxValOfArrByKey(array, key) {
    var newArr = arraySortByKey(array, key);
    return {
        min: newArr[0],
        max: newArr[newArr.length - 1]
    };
}
exports.getMaxValOfArrByKey = getMaxValOfArrByKey;
function getArrayCommonItem(a1, a2) {
    var arr = __spreadArray(__spreadArray([], a1, true), a2, true);
    var tmp = [];
    arr.sort().sort(function (a, b) {
        if (a === b && tmp.indexOf(a) === -1) {
            tmp.push(a);
        }
        return 1;
    });
    return tmp;
}
exports.getArrayCommonItem = getArrayCommonItem;
function formatScannerLEDMInfo(setting) {
    if (!setting) {
        return {};
    }
    var obj = {};
    for (var key in setting) {
        var new_key = key.split(':')[1];
        if (Array.isArray(setting[key])) {
            obj[new_key] = [];
            var arrSet = setting[key];
            for (var i = 0; i < arrSet.length; i++) {
                if (typeof arrSet[i] === 'object') {
                    obj[new_key].push(formatScannerLEDMInfo(arrSet[i]));
                }
                else {
                    obj[new_key].push(arrSet[i]);
                }
            }
        }
        else if (typeof setting[key] === 'object') {
            obj[new_key] = formatScannerLEDMInfo(setting[key]);
        }
        else {
            obj[new_key] = setting[key];
        }
    }
    return obj;
}
exports.formatScannerLEDMInfo = formatScannerLEDMInfo;
module.exports = {
    ab2string: ab2string,
    arraySortByKey: arraySortByKey,
    getMaxValOfArrByKey: getMaxValOfArrByKey,
    getArrayCommonItem: getArrayCommonItem,
    formatScannerLEDMInfo: formatScannerLEDMInfo,
};
//# sourceMappingURL=data:application/json;base64,